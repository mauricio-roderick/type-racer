{"version":3,"sources":["webpack:///./src/containers/Login/Login.js","webpack:///./src/containers/Layout/Layout.js","webpack:///./src/containers/Layout/Layout.scss","webpack:///./src/config/resource.js","webpack:///./src/config/collection.js","webpack:///./src/services/platform-api/index.js","webpack:///./src/containers/Login/Login.scss"],"names":["LoginForm","props","a","username","password","platormApiSvc","post","resource","auth","data","t","authCompelete","accessToken","notifMsg","_get","e","notifMessage","internalError","message","error","state","className","classes","header","process","name","loginForm","initialValues","remember","onFinish","this","handleSubmit","Item","rules","required","prefix","placeholder","type","htmlType","block","PureComponent","_flow","withRouter","connectToApp","Header","Layout","Content","Footer","PageLayout","children","navItems","isAuthenticated","link","appRoutes","home","label","race","logout","login","layout","logo","theme","mode","menu","map","nav","i","key","to","content","user","module","exports","raceHistory","randomText","dateTimeFormat","client","api","global","notifKey","raceTimeLimit","raceCountdown","countDownLabels","axiosInstance","axios","create","baseURL","interceptors","request","use","config","localStorage","getItem","unauthorizedNotif","notification","close","headers","Authorization","response","status","oauthToken","Sentry","Promise","reject"],"mappings":"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","file":"chunks/6.006e00f3e35d8bd3f551.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport { Form, Input, Button, message } from 'antd'\nimport { UserOutlined, LockOutlined } from '@ant-design/icons'\nimport { withRouter } from 'react-router-dom'\nimport _flow from 'lodash.flow'\nimport _get from 'lodash.get'\n\nimport classes from './Login.scss'\nimport resource from '@config/resource'\nimport { notifMessage } from '@config/collection'\nimport platormApiSvc from '@services/platform-api/'\nimport { connect as connectToApp } from '@providers/app'\nimport Layout from '@containers/Layout/Layout'\n\nclass LoginForm extends PureComponent {\n  constructor (props) {\n    super(props)\n    this.state = {\n    }\n  }\n\n  handleSubmit = async ({ username, password }) => {\n    try {\n      const { data } = await platormApiSvc.post(resource.auth + '/token', {}, {\n        auth: {\n          username,\n          password\n        }\n      })\n\n      this.props.authCompelete(data.accessToken)\n    } catch (e) {\n      const notifMsg = _get(e, 'response.status') === 401 ? 'Incorrect username or password.' : notifMessage.internalError\n      message.error(notifMsg)\n    }\n  }\n\n  render () {\n    return (\n      <Layout>\n        <h2 className={classes.header}>Login to {process.env.APP_NAME}</h2>\n        <Form\n          name=\"normal_login\"\n          className={classes.loginForm}\n          initialValues={{ remember: true }}\n          onFinish={this.handleSubmit}\n        >\n          <Form.Item\n            name=\"username\"\n            rules={[{ required: true, message: 'Username is required.' }]}\n          >\n            <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n          </Form.Item>\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, message: 'Password is required.' }]}\n          >\n            <Input\n              prefix={<LockOutlined className=\"site-form-item-icon\" />}\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            Log in\n          </Button>\n        </Form>\n      </Layout>\n    )\n  }\n}\n\nconst appMethods = ({ authCompelete }) => {\n  return { authCompelete }\n}\nexport default _flow([\n  withRouter,\n  connectToApp(null, appMethods)\n])(LoginForm)","import React, { PureComponent } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport { Layout, Menu } from 'antd'\nimport _flow from 'lodash.flow'\nimport appRoutes from '@config/app-routes'\n\nimport classes from './Layout.scss'\nimport { connect as connectToApp } from '@providers/app'\n\nconst { Header, Content, Footer } = Layout\n\nclass PageLayout extends PureComponent {\n  render () {\n    const { children, isAuthenticated } = this.props\n    const navItems = isAuthenticated ? [{\n      link: appRoutes.home,\n      label: 'Home'\n    }, {\n      link: appRoutes.race,\n      label: 'Race'\n    }, {\n      link: appRoutes.logout,\n      label: 'Logout'\n    }] : [{\n      link: appRoutes.login,\n      label: 'Login'\n    }]\n\n    return (\n      <Layout className={classes.layout}>\n        <Header>\n          <div className={classes.logo}>{process.env.APP_NAME}</div>\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            className={classes.menu}\n          >\n            {navItems.map((nav, i) => (\n              <Menu.Item key={i}>\n                <Link to={nav.link}>{nav.label}</Link>\n              </Menu.Item>\n            ))}\n          </Menu>\n        </Header>\n        <Content className={classes.content}>\n          {children}\n        </Content>\n        <Footer className=\"text-center\">TypeRacer</Footer>\n      </Layout>\n    )\n  }\n}\n\nconst stateToProps = ({ isAuthenticated, user }) => {\n  return { isAuthenticated, user }\n}\nconst methodToProps = ({ logout }) => {\n  return { logout }\n}\nexport default _flow([\n  withRouter,\n  connectToApp(stateToProps, methodToProps)\n])(PageLayout)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"_1dTBE\",\"logo\":\"ngQN5\",\"menu\":\"_1XKsq\",\"content\":\"_1ttGe\"};","const prefix = '/private'\n\nconst resource = {\n  auth: '/oauth',\n  raceHistory: prefix + '/race-history',\n  randomText: '/random-text'\n}\n\nexport default resource","export const dateFormat = {\n  client: 'M/D/YY',\n  api: 'YYYY-MM-DD'\n}\nexport const dateTimeFormat = {\n  client: 'M/D/YY hh:mm a z',\n  api: 'YYYY-MM-DDTHH:mm:ssZ'\n}\nexport const notifMessage = {\n  internalError: 'Something went wrong.'\n}\nexport const global = {\n  notifKey: 'GLOBAL_NOTIF'\n}\nexport const raceTimeLimit = 10 // seconds\nexport const raceCountdown = 3 // seconds\nexport const countDownLabels = [\n  '',\n  'Go!',\n  'Set',\n  'Ready'\n]\n\nexport default {}","import axios from 'axios'\nimport _get from 'lodash.get'\nimport { notification } from 'antd'\nimport * as Sentry from '@sentry/browser'\n\nimport resource from '@config/resource'\nimport { global } from '@config/collection'\n\nconst baseURL = process.env.PLATFORM_API_URL\nconst axiosInstance = axios.create({ baseURL })\n\naxiosInstance.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem('accessToken')\n  if (accessToken) {\n    axiosInstance.unauthorizedNotif = false\n    notification.close(global.notifKey)\n    config.headers.Authorization = `Bearer ${accessToken}`\n  }\n\n  return config\n})\n\naxiosInstance.interceptors.response.use(response => {\n  return response\n}, async (error) => {\n  const status = _get(error, 'response.status')\n  const configUrl = _get(error, 'response.config.url')\n\n  if (status === 401 && configUrl !== resource.oauthToken) {\n    // logout user\n  }\n\n  if (status >= 500) {\n    Sentry.captureException(error)\n  }\n\n  return Promise.reject(error)\n})\n\nexport default axiosInstance","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"_2Reci\",\"header\":\"_1kxmP\"};"],"sourceRoot":""}